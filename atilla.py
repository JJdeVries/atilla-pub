import random 
import numpy as np 
import enum 
from ..bot_control import Move 
try :
    from battleground .world import World 
except :
    pass 
_OOOOO0O0OOOO00OO0 ={Move .UP :np .array ([0 ,1 ],dtype =np .int16 ),Move .RIGHT :np .array ([1 ,0 ],dtype =np .int16 ),Move .LEFT :np .array ([-1 ,0 ],dtype =np .int16 ),Move .DOWN :np .array ([0 ,-1 ],dtype =np .int16 ),Move .STAY :np .array ([0 ,0 ],dtype =np .int16 ),}
def _OO00OO000O0000OO0 (O0O00O0OO00000O0O ):
    O0O000OOOOO000000 =[]
    OOO0O0O00OOO0O0O0 =np .bincount (O0O00O0OO00000O0O .flatten ())
    for O00O0O00O0O00OO0O ,O0O0O00000000OOOO in enumerate (OOO0O0O00OOO0O0O0 ):
        O0O000OOOOO000000 .append ((O0O0O00000000OOOO ,O00O0O00O0O00OO0O ))
    O0O000OOOOO000000 .sort ()
    return list (O00O0OOOOOO00O0O0 [1 ]for O00O0OOOOOO00O0O0 in O0O000OOOOO000000 )
class _O00000O0O0000OO0O (enum .Enum ):
    Claim =3 
    Take =2 
    Neuter =1 
    Nothing =0 
class AtillaTheAttacker :
    def __init__ (OO00O00OO0OO0000O ):
        OO00O00OO0OO0000O .target =None 
        OO00O00OO0OO0000O .position =np .array ([0 ,0 ],dtype =np .int16 )
        OO00O00OO0OO0000O .id =0 
    @property 
    def __O0O0OO00OO00OO000 (OOO0O0000O00OO0O0 ):
        return OOO0O0000O00OO0O0 .position [0 ]
    @property 
    def __O00OO00OOOO0O000O (O0OOOO0000O00OO0O ):
        return O0OOOO0000O00OO0O .position [1 ]
    def __O0OO00OO0O000OO00 (O0OOO000O0O00O0O0 ,O000O00OO000OO000 ):
        if O000O00OO000OO000 ==0 :
            return _O00000O0O0000OO0O .Claim 
        O0OOOO0OO00O0O0O0 =(O0OOO000O0O00O0O0 .id -O000O00OO000OO000 )%3 
        OOOOOOOO00O000O00 =_O00000O0O0000OO0O (O0OOOO0OO00O0O0O0 )
        return OOOOOOOO00O000O00 
    def __O0O00O0OO00OO000O (O00OOO0O000O0OOOO ,OO00OOO00000O00OO ,O000OOOOO00OOO0OO ):
        OO00O000000OO0O0O =O00OOO0O000O0OOOO .position +_OOOOO0O0OOOO00OO0 [OO00OOO00000O00OO ]
        O00O0OO00000OOO0O =O000OOOOO00OOO0OO [OO00O000000OO0O0O [1 ]][OO00O000000OO0O0O [0 ]]
        return OO00O000000OO0O0O ,O00OOO0O000O0OOOO .__O0OO00OO0O000OO00 (O00O0OO00000OOO0O ),O00O0OO00000OOO0O 
    def __O0000OO00O0O0O0O0 (OO0OO000000000OOO ,O0O0O000O0OO0O0OO ):
        O00OOOOO0O00OOO0O =[]
        if OO0OO000000000OOO .__O0O0OO00OO00OO000 >0 :
            O00OOOOO0O00OOO0O .append (Move .LEFT )
        if OO0OO000000000OOO .__O0O0OO00OO00OO000 <O0O0O000O0OO0O0OO -1 :
            O00OOOOO0O00OOO0O .append (Move .RIGHT )
        if OO0OO000000000OOO .__O00OO00OOOO0O000O >0 :
            O00OOOOO0O00OOO0O .append (Move .DOWN )
        if OO0OO000000000OOO .__O00OO00OOOO0O000O <O0O0O000O0OO0O0OO -1 :
            O00OOOOO0O00OOO0O .append (Move .UP )
        return O00OOOOO0O00OOO0O 
    def get_name (O00OOOOO0OO00O0O0 ):
        return "Atilla the Attacker"
    def get_contributor (OOO0OOO00OO0O0O0O ):
        return "Jorik de Vries"
    def __OOO00OOOOOOOO0000 (O000OO0000OOO0O00 ,O000O00O0O000OO00 ,O0OO0O0O000O0O0O0 ):
        return abs (O000O00O0O000OO00 [0 ]-O0OO0O0O000O0O0O0 [0 ])+abs (O000O00O0O000OO00 [1 ]-O0OO0O0O000O0O0O0 [1 ])
    def __OOOOOOO00OOO00O00 (O00O00O0OO0O0O000 ,OOOOOOOOO00OO0000 ,OOOOOO0O0O0000O00 ):
        O00OO0OOOO0O0OOOO =OOOOOOOOO00OO0000 .shape [0 ]+OOOOOOOOO00OO0000 .shape [1 ]
        OOOOOO0O0OO00OOOO =None 
        OO0OO0OOOO0O0OO0O ={OO00O0OOOO0000O00 ["id"]:OO00O0OOOO0000O00 ["position"]for OO00O0OOOO0000O00 in OOOOOO0O0O0000O00 }
        def __O0OOOO0OOOOOOO0O0 (OO0O000OO0O0000O0 ,O000OOOO0OOO0O0O0 ):
            if O00O00O0OO0O0O000 .__OOO00OOOOOOOO0000 (O00O00O0OO0O0O000 .position ,OO0O000OO0O0000O0 )>O00OO0OOOO0O0OOOO :
                return False 
            if O00O00O0OO0O0O000 .__O0OO00OO0O000OO00 (O000OOOO0OOO0O0O0 )is not _O00000O0O0000OO0O .Take :
                return False 
            if O00O00O0OO0O0O000 .__OOO00OOOOOOOO0000 (OO0OO0OOOO0O0OO0O [O000OOOO0OOO0O0O0 ],[O0OOO00OO0O00O00O ,O00OOO00OO00OOO00 ])<=2 :
                return False 
            return True 
        for O0OOO00OO0O00O00O in range (-5 ,5 ):
            O0OO0OOOOOO0OO0O0 =O00O00O0OO0O0O000 .__O0O0OO00OO00OO000 +O0OOO00OO0O00O00O 
            if O0OO0OOOOOO0OO0O0 <0 or O0OO0OOOOOO0OO0O0 >=OOOOOOOOO00OO0000 .shape [0 ]:
                continue 
            for O00OOO00OO00OOO00 in range (-5 ,5 ):
                O00OOO0O00O000O00 =O00O00O0OO0O0O000 .__O00OO00OOOO0O000O +O00OOO00OO00OOO00 
                if O00OOO0O00O000O00 <0 or O00OOO0O00O000O00 >=OOOOOOOOO00OO0000 .shape [1 ]:
                    continue 
                if not __O0OOOO0OOOOOOO0O0 ([O0OO0OOOOOO0OO0O0 ,O00OOO0O00O000O00 ],OOOOOOOOO00OO0000 [O00OOO0O00O000O00 ][O0OO0OOOOOO0OO0O0 ]):
                    continue 
                O00OO0OOOO0O0OOOO =O00O00O0OO0O0O000 .__OOO00OOOOOOOO0000 (O00O00O0OO0O0O000 .position ,[O0OO0OOOOOO0OO0O0 ,O00OOO0O00O000O00 ])
                OOOOOO0O0OO00OOOO =np .array ([O0OO0OOOOOO0OO0O0 ,O00OOO0O00O000O00 ],np .int16 )
        if OOOOOO0O0OO00OOOO is not None :
            return OOOOOO0O0OO00OOOO ,O00OO0OOOO0O0OOOO 
        for O00OOO00OO00OOO00 ,O0O0OO0000OOO0OO0 in enumerate (OOOOOOOOO00OO0000 ):
            for O0OOO00OO0O00O00O ,O000O00O0OO0OOO00 in enumerate (O0O0OO0000OOO0OO0 ):
                if not __O0OOOO0OOOOOOO0O0 ([O0OOO00OO0O00O00O ,O00OOO00OO00OOO00 ],O000O00O0OO0OOO00 ):
                    continue 
                O00OO0OOOO0O0OOOO =O00O00O0OO0O0O000 .__OOO00OOOOOOOO0000 (O00O00O0OO0O0O000 .position ,[O0OOO00OO0O00O00O ,O00OOO00OO00OOO00 ])
                OOOOOO0O0OO00OOOO =np .array ([O0OOO00OO0O00O00O ,O00OOO00OO00OOO00 ],np .int16 )
        if OOOOOO0O0OO00OOOO is None :
            if O00O00O0OO0O0O000 .__O0O0OO00OO00OO000 !=0 :
                OOOOOO0O0OO00OOOO =np .array ([0 ,0 ],np .int16 )
            else :
                OOOOOO0O0OO00OOOO =np .array ([OOOOOOOOO00OO0000 .shape [0 ]-1 ,OOOOOOOOO00OO0000 .shape [1 ]-1 ],np .int16 )
        return OOOOOO0O0OO00OOOO ,O00O00O0OO0O0O000 .__OOO00OOOOOOOO0000 (O00O00O0OO0O0O000 .position ,OOOOOO0O0OO00OOOO )
    def determine_next_move (OOOOO00O0OO00OOOO ,O0000OOO00OO0O0OO ,O0000O00OOOO00000 ,O0O0OO00O00OO00OO ,):
        OOOO0O0OO00OOOOOO =OOOOO00O0OO00OOOO .__O0000OO00O0O0O0O0 (O0000OOO00OO0O0OO .shape [0 ])
        O0O0000OO0O00O0OO =[]
        for OOOO0O00OO0O0000O in OOOO0O0OO00OOOOOO :
            O0OOOO000000O000O ,O00OO000OO0OOO0OO ,O0000OO0OOO0OO0OO =OOOOO00O0OO00OOOO .__O0O00O0OO00OO000O (OOOO0O00OO0O0000O ,O0000OOO00OO0O0OO )
            if any (OOOOO00O0OO00OOOO .__OOO00OOOOOOOO0000 (OOOO0OOO00OO00O0O ["position"],O0OOOO000000O000O )<=2 for OOOO0OOO00OO00O0O in O0000O00OOOO00000 if OOOO0OOO00OO00O0O ["id"]==O0000OO0OOO0OO0OO ):
                continue 
            if O00OO000OO0OOO0OO ==_O00000O0O0000OO0O .Take :
                O0O0000OO0O00O0OO .append ((OOOO0O00OO0O0000O ,O0000OO0OOO0OO0OO ))
        if O0O0000OO0O00O0OO :
            if len (O0O0000OO0O00O0OO )==1 :
                return O0O0000OO0O00O0OO [0 ][0 ]
            OO0OO0000O0000O00 =_OO00OO000O0000OO0 (O0000OOO00OO0O0OO )
            OO00000OO0OO00000 =-1 
            OO00O0000O0OOOO00 =None 
            for OOOO0O00OO0O0000O ,O0000OO0OOO0OO0OO in O0O0000OO0O00O0OO :
                O000O0OOOO0O00OOO =OO0OO0000O0000O00 .index (O0000OO0OOO0OO0OO )
                if O000O0OOOO0O00OOO >OO00000OO0OO00000 :
                    OO00O0000O0OOOO00 =OOOO0O00OO0O0000O 
                    OO00000OO0OO00000 =O000O0OOOO0O00OOO 
            assert OO00O0000O0OOOO00 is not None 
            return OO00O0000O0OOOO00 
        O0OO000OO0OOOOOOO ,O00OOO0OOOO0O0OOO =OOOOO00O0OO00OOOO .__OOOOOOO00OOO00O00 (O0000OOO00OO0O0OO ,O0000O00OOOO00000 )
        OO0OOO0000OO0O000 =[]
        if O0OO000OO0OOOOOOO [0 ]>OOOOO00O0OO00OOOO .__O0O0OO00OO00OO000 :
            OO0OOO0000OO0O000 .append (Move .RIGHT )
        elif O0OO000OO0OOOOOOO [0 ]<OOOOO00O0OO00OOOO .__O0O0OO00OO00OO000 :
            OO0OOO0000OO0O000 .append (Move .LEFT )
        if O0OO000OO0OOOOOOO [1 ]>OOOOO00O0OO00OOOO .__O00OO00OOOO0O000O :
            OO0OOO0000OO0O000 .append (Move .UP )
        elif O0OO000OO0OOOOOOO [1 ]<OOOOO00O0OO00OOOO .__O00OO00OOOO0O000O :
            OO0OOO0000OO0O000 .append (Move .DOWN )
        for O000O0000O0OO0O00 in OO0OOO0000OO0O000 :
            _O0OOO0OO0OO00O000 ,O00OO000OO0OOO0OO ,_O0OOO0OO0OO00O000 =OOOOO00O0OO00OOOO .__O0O00O0OO00OO000O (O000O0000O0OO0O00 ,O0000OOO00OO0O0OO )
            if O00OO000OO0OOO0OO is _O00000O0O0000OO0O .Claim or O00OO000OO0OOO0OO is _O00000O0O0000OO0O .Take :
                return O000O0000O0OO0O00 
        return OO0OOO0000OO0O000 [0 ]
